program     ::= includes structdecls vardecls fundecls EOF

# include --------------------------
includes    ::= "#include" STRING_LITERAL includes
              | nothing


structtype  ::= "struct" IDENT

# structdecl -----------------------
structdecls  ::= structtype "{" vardecl vardecls "}" ";" structdecls    # structure declaration
               | nothing

# vardecl --------------------------
type        ::= ( "int" | "char" | "void" | structtype ) reference

reference   ::= "*"
             | nothing


vardecl     ::= type IDENT arraydecl ";"

vardecls    ::= vardecl vardecls
              | nothing


arraydecl   ::= "[" INT_LITERAL "]"
             | nothing


# fundecl ---------------------
fundecl     ::= type IDENT "(" params ")" block

fundecls    ::= fundecl fundecls
              | nothing

params      ::= type IDENT paramsplus
              | nothing

paramsplus  ::= "," type IDENT paramsplus
              | nothing


block       ::= "{" vardecls stmts "}"

stmts       ::= stmt stmts
              | nothing

elsestmt    ::= "else" stmt
              | nothing

stmt        ::= block
              | "while" "(" exp ")" stmt
              | "if" "(" exp ")" stmt elsestmt
              | "return" optexp ";"
              | exp "=" exp ";"
              | exp ";"

optexp      ::= exp
              | nothing

exp         ::= "(" exp ")"
              | exp8

# expression precedence rules
exp8        ::= exp8 "||" exp8
              | exp7

exp7        ::= exp7 "&&" exp7
              | exp6

exp6        ::= exp6 "=="  exp6
              | exp6 "!=" exp6
              | exp5

exp5        ::= exp5 "<"  exp5
              | exp5 "<=" exp5
              | exp5 ">"  exp5
              | exp5 ">=" exp5
              | exp4

exp4        ::= exp4 "+" exp4
              | exp4 "-" exp4
              | exp3

exp3        ::= exp3 "*" exp3
              | exp3 "/" exp3
              | exp3 "%" exp3
              | exp2

exp2        ::= "-" exp2   # negates itself
              | valueat    # "*" exp
              | typecast   # "(" type ")"
              | sizeof     # "sizeof" "(" type ")"
              | exp1

# final expression
exp1        ::= funcall     # IDENT "(" ... --> LL2!!
              | IDENT | INT_LITERAL | STRING_LITERAL | CHAR_LITERAL
              | arrayaccess # exp "[" --> also LL2
              | fieldaccess # exp "." IDENT


funcall     ::= IDENT "(" optexpplus ")"

optexpplus  ::= exp expplus
              | nothing

expplus     ::= "," exp expplus
              | nothing

arrayaccess ::= exp "[" exp "]"
fieldaccess ::= exp "." IDENT

valueat      ::= "*" exp                          # Value at operator (pointer indirection)
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")" exp                 # type casting
