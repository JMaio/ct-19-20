Program(VarDecl(CHAR,a11),VarDecl(CHAR,a12),VarDecl(CHAR,a13),VarDecl(CHAR,a21),VarDecl(CHAR,a22),VarDecl(CHAR,a23),VarDecl(CHAR,a31),VarDecl(CHAR,a32),VarDecl(CHAR,a33),VarDecl(CHAR,empty),FunDecl(VOID,reset,Block(Assign(VarExpr(a11),VarExpr(empty)),Assign(VarExpr(a12),VarExpr(empty)),Assign(VarExpr(a13),VarExpr(empty)),Assign(VarExpr(a21),VarExpr(empty)),Assign(VarExpr(a22),VarExpr(empty)),Assign(VarExpr(a23),VarExpr(empty)),Assign(VarExpr(a31),VarExpr(empty)),Assign(VarExpr(a32),VarExpr(empty)),Assign(VarExpr(a33),VarExpr(empty)))),FunDecl(INT,full,Block(VarDecl(INT,n),Assign(VarExpr(n),IntLiteral(0)),If(BinOp(VarExpr(a11),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a21),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a31),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a12),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a22),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a32),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a13),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a23),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(a33),NE,VarExpr(empty)),Assign(VarExpr(n),BinOp(VarExpr(n),ADD,IntLiteral(1)))),If(BinOp(VarExpr(n),EQ,IntLiteral(9)),Return(IntLiteral(1)),Return(IntLiteral(0))))),FunDecl(INT,set,VarDecl(CHAR,row),VarDecl(INT,col),VarDecl(CHAR,mark),Block(VarDecl(INT,r),Assign(VarExpr(r),IntLiteral(1)),If(BinOp(VarExpr(row),EQ,ChrLiteral(a)),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(1)),Block(If(BinOp(VarExpr(a11),EQ,VarExpr(empty)),Assign(VarExpr(a11),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(2)),Block(If(BinOp(VarExpr(a12),EQ,VarExpr(empty)),Assign(VarExpr(a12),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(3)),Block(If(BinOp(VarExpr(a13),EQ,VarExpr(empty)),Assign(VarExpr(a13),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(Assign(VarExpr(r),IntLiteral(0))))))))),Block(If(BinOp(VarExpr(row),EQ,ChrLiteral(b)),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(1)),Block(If(BinOp(VarExpr(a21),EQ,VarExpr(empty)),Assign(VarExpr(a21),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(2)),Block(If(BinOp(VarExpr(a22),EQ,VarExpr(empty)),Assign(VarExpr(a22),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(3)),Block(If(BinOp(VarExpr(a23),EQ,VarExpr(empty)),Assign(VarExpr(a23),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(Assign(VarExpr(r),IntLiteral(0))))))))),Block(If(BinOp(VarExpr(row),EQ,ChrLiteral(c)),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(1)),Block(If(BinOp(VarExpr(a31),EQ,VarExpr(empty)),Assign(VarExpr(a31),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(2)),Block(If(BinOp(VarExpr(a32),EQ,VarExpr(empty)),Assign(VarExpr(a32),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(If(BinOp(VarExpr(col),EQ,IntLiteral(3)),Block(If(BinOp(VarExpr(a33),EQ,VarExpr(empty)),Assign(VarExpr(a33),VarExpr(mark)),Assign(VarExpr(r),BinOp(IntLiteral(0),SUB,IntLiteral(1))))),Block(Assign(VarExpr(r),IntLiteral(0))))))))),Block(Assign(VarExpr(r),IntLiteral(0)))))))),Return(VarExpr(r)))),FunDecl(VOID,printGame,Block(ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(     1   2   3
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(   +---+---+---+
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(a  | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a11))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a12))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a13))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( |
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(   +---+---+---+
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(b  | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a21))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a22))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a23))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( |
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(   +---+---+---+
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(c  | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a31))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a32))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( | )))),ExprStmt(FunCallExpr(print_c,VarExpr(a33))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( |
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(   +---+---+---+
)))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(
)))))),FunDecl(VOID,printWinner,VarDecl(INT,player),Block(ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(Player )))),ExprStmt(FunCallExpr(print_i,VarExpr(player))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( has won!
)))))),FunDecl(INT,switchPlayer,VarDecl(INT,currentPlayer),Block(If(BinOp(VarExpr(currentPlayer),EQ,IntLiteral(1)),Return(IntLiteral(2)),Return(IntLiteral(1))))),FunDecl(CHAR,get_mark,VarDecl(INT,player),Block(If(BinOp(VarExpr(player),EQ,IntLiteral(1)),Return(ChrLiteral(X)),Return(ChrLiteral(O))))),FunDecl(VOID,selectmove,VarDecl(INT,player),Block(VarDecl(CHAR,row),VarDecl(INT,col),VarDecl(INT,selected),VarDecl(INT,success),VarDecl(CHAR,mark),Assign(VarExpr(selected),IntLiteral(1)),While(VarExpr(selected),Block(ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(Player )))),ExprStmt(FunCallExpr(print_i,VarExpr(player))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral( select move (e.g. a2)>)))),Assign(VarExpr(row),FunCallExpr(read_c)),Assign(VarExpr(col),FunCallExpr(read_i)),Assign(VarExpr(mark),FunCallExpr(get_mark,VarExpr(player))),Assign(VarExpr(success),FunCallExpr(set,VarExpr(row),VarExpr(col),VarExpr(mark))),If(BinOp(VarExpr(success),EQ,IntLiteral(0)),Block(ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(That is not a valid move!
))))),Block(If(BinOp(VarExpr(success),EQ,BinOp(IntLiteral(0),SUB,IntLiteral(1))),ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(That move is not possible!
)))),Assign(VarExpr(selected),IntLiteral(0))))))))),FunDecl(INT,won,VarDecl(CHAR,mark),Block(VarDecl(INT,r),Assign(VarExpr(r),IntLiteral(0)),If(BinOp(VarExpr(a11),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a21),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a31),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1))))),Block(If(BinOp(VarExpr(a22),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a33),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1))))),Block(If(BinOp(VarExpr(a12),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a13),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1)))))))))))),If(BinOp(VarExpr(a12),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a22),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a32),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1)))))))),If(BinOp(VarExpr(a13),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a23),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a33),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1))))),Block(If(BinOp(VarExpr(a22),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a31),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1)))))))))),If(BinOp(VarExpr(a21),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a22),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a23),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1)))))))),If(BinOp(VarExpr(a31),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a32),EQ,VarExpr(mark)),Block(If(BinOp(VarExpr(a33),EQ,VarExpr(mark)),Block(Assign(VarExpr(r),IntLiteral(1)))))))),Return(VarExpr(r)))),FunDecl(VOID,main,Block(VarDecl(INT,playing),VarDecl(INT,player),VarDecl(CHAR,mark),VarDecl(CHAR,yesno),Assign(VarExpr(empty),ChrLiteral( )),Assign(VarExpr(playing),IntLiteral(1)),ExprStmt(FunCallExpr(reset)),ExprStmt(FunCallExpr(printGame)),Assign(VarExpr(player),IntLiteral(1)),While(VarExpr(playing),Block(ExprStmt(FunCallExpr(selectmove,VarExpr(player))),Assign(VarExpr(mark),FunCallExpr(get_mark,VarExpr(player))),ExprStmt(FunCallExpr(printGame)),If(FunCallExpr(won,VarExpr(mark)),Block(ExprStmt(FunCallExpr(printWinner,VarExpr(player))),Assign(VarExpr(playing),IntLiteral(0))),If(BinOp(FunCallExpr(full),EQ,IntLiteral(1)),Block(ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(It's a draw!
)))),Assign(VarExpr(playing),IntLiteral(0))),Block(Assign(VarExpr(player),FunCallExpr(switchPlayer,VarExpr(player)))))),If(BinOp(VarExpr(playing),EQ,IntLiteral(0)),Block(ExprStmt(FunCallExpr(print_s,TypecastExpr(PointerType(CHAR),StrLiteral(Play again? (y/n)> )))),Assign(VarExpr(yesno),FunCallExpr(read_c)),If(BinOp(VarExpr(yesno),EQ,ChrLiteral(y)),Block(Assign(VarExpr(playing),IntLiteral(1)),ExprStmt(FunCallExpr(reset))),Block(If(BinOp(VarExpr(yesno),EQ,ChrLiteral(Y)),Block(Assign(VarExpr(playing),IntLiteral(1)),ExprStmt(FunCallExpr(reset)))))))))))))